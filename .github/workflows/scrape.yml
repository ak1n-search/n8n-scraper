# .github/workflows/scrape.yml

name: Scrape Substack Search Results

on:
  repository_dispatch:
    types: [n8n-trigger]

jobs:
  scrape-and-return:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Playwright library
        run: npm install playwright-core

      - name: Install Playwright Browsers
        run: npx playwright install chromium

      - name: Run Playwright and Scrape Data
        id: scrape_step 
        run: |
          scraped_json=$(node -e "
            const { chromium } = require('playwright-core');
            async function run() {
              const browser = await chromium.launch();
              const page = await browser.newPage();
              try {
                await page.goto('https://substack.com/search/banjercito?searching=all_posts', { waitUntil: 'domcontentloaded' });
                
                // --- THIS IS THE NEW DEBUGGING STEP ---
                // Take a screenshot to see what the page looks like
                await page.screenshot({ path: 'debug.png', fullPage: true });

                // We'll still try to wait, but we expect this to fail
                await page.waitForSelector('[data-testid=\"post-preview-title\"]', { timeout: 10000 }); // Shorten timeout to 10s
                
                const titles = await page.locator('[data-testid=\"post-preview-title\"]').allInnerTexts();
                return JSON.stringify(titles);
              } catch (e) {
                console.error(e.name, e.message); // Log the error name
                return '[]'; // Return empty array on failure
              } finally {
                await browser.close();
              }
            }
            run().then(console.log);
          ")
          echo "scraped_json=$scraped_json" >> $GITHUB_OUTPUT
      
      # --- THIS STEP UPLOADS THE SCREENSHOT ---
      - name: Upload Debug Screenshot
        if: always() # This makes the step run even if the previous step fails
        uses: actions/upload-artifact@v4
        with:
          name: debug-screenshot
          path: debug.png

      # This step will likely not run, but we leave it for when we fix the script
      - name: Send data to n8n
        if: success()
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d "{\"postTitles\": ${{ steps.scrape_step.outputs.scraped_json }} }" \
          "${{ secrets.N8N_WEBHOOK_URL }}"
